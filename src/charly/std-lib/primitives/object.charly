export = {

  # Return the length of this object
  func length() {
    call_internal("length", self)
  }

  # Returns a colorized version of the string representation
  # of this object
  func colorize(code) {
    call_internal("colorize", self.to_s(), code)
  }

  # Cast the current object to a string
  func to_s() {
    "" + self
  }

  # Returns the type of this object as a string
  func type() {
    call_internal("typeof", self)
  }

  # Return the property at value
  func __member(name) {
    call_internal("getvalue", self, name)
  }

  # Set the property at value
  func __member_write(name, value) {
    call_internal("setvalue", self, name, value)
  }

  # Pipes self into *other*
  # Other has to be a function
  func call(other) {
    if (other.type() == "Function") {
      other(self)
    }
  }

  # Passes self to the callback
  # Returns self
  func tap(callback) {
    callback(self)
    self
  }

  func pipe() {
    const pipes = __arguments

    if pipes.type() ! "Array" {
      raise Exception("pipe expected argument to be of type Array, got: " + pipes.type())
    }

    pipes.each(func(pipe) {
      if pipe.type() ! "Function" {
        raise Exception("pipe expected an array of Functions, got: " + pipe.type())
      }

      pipe(self)
    })

    self
  }

  func transform() {
    const pipes = __arguments

    if pipes.type() ! "Array" {
      raise Exception("transform expected argument to be of type Array, got: " + pipes.type())
    }

    let result = self
    pipes.each(func(pipe) {
      if pipe.type() ! "Function" {
        raise Exception("transform expected an array of Functions, got: " + pipe.type())
      }

      result = pipe(result)
    })

    result
  }
}
