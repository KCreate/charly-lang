export = {

  # Returns the numeric representation of this string
  # Returns null if the string could not be casted to a
  # numeric
  func to_n() {
    call_internal("to_numeric", self)
  }

  # Trims all whitespace from the beginning and the end of the string
  func trim() {
    call_internal("trim", self)
  }

  # Remove n characters from the left
  func lstrip(n) {
    self.substring(n, self.length() - n)
  }

  # Remove n characters from the right
  func rstrip(n) {
    self.substring(0, self.length() - n)
  }

  # Writes self to stdout and asks for user input
  func prompt() {
    write(self)
    gets()
  }

  # Writes self to stdout and ask for a single char
  func promptc() {
    write(self)
    getc()
  }

  # Writes self to stdout and ask for user input
  # Input will be casted to a numeric
  func promptn() {
    write(self)
    gets().to_n()
  }

  # Return each char in a string
  func each(callback) {
    let i = 0
    let count = self.length()

    while (i < count) {
      callback(self[i], i)
      i += 1
    }

    self
  }

  # Reverse a string
  func reverse() {
    let new = ""
    self.each(func(c) {
      new = c + new
    })
    new
  }

  # Filter out unwanted characters from a string
  func filter(filter) {
    let new = ""
    self.each(func(c) {
      if (filter(c)) {
        new += c
      }
    })
    new
  }

  # Return a substring from an index
  func substring(start, offset) {
    let index = start
    let end = start + offset
    let result = ""

    while (index < end) {
      if (self[index]) {
        result += self[index]
      }
      index += 1
    }

    result
  }

  # Returns a string that consists of the values returned by the callback
  func map(callback) {
    let new = ""
    self.each(func(c) {
      new += callback(c)
    })
    new
  }

  # Returns true if the string is empty
  func empty() {
    self.length() == 0
  }

  # Returns an array of numbers representing this char
  # If the char is a unicode char the array will contain 2 numbers and so on
  func ord() {
    call_internal("ord", self)
  }

  # Split this string into parts
  func split(needle) {
    let result = []
    let haystack = self
    let haystack_length = haystack.length()
    let needle_length = needle.length()

    let i = 0
    while (i < haystack_length) {
      if (haystack.substring(i, needle_length) == needle) {
        result.push(haystack.substring(0, i))
        haystack = haystack.substring(i + needle_length, haystack_length)
        haystack_length = haystack.length()
        i = 0
      }
      i += 1
    }

    # If the haystack still contains values append them too
    if (haystack.length() > 0) {
      result.push(haystack)
    }

    # If the needle was an empty string
    # remove the first element
    if (needle_length == 0) {
      result.delete(0)
    }

    result
  }

  # Return the index of needle inside self
  func index_of(needle, offset) {
    let found_index = -1
    let end_pos = self.length() - needle.length()
    self.each(func(char, i) {
      if (found_index == -1) {
        if (i <= end_pos) {
          if (i >= offset) {
            if (self.substring(i, needle.length()) == needle) {
              found_index = i
            }
          }
        }
      }
    })
    found_index
  }
}
