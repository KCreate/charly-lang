export = {

  # Returns the numeric representation of this string
  # Returns null if the string could not be casted to a
  # numeric
  func to_n() {
    call_internal("to_numeric", self);
  };

  # Trims all whitespace from the beginning and the end of the string
  func trim() {
    call_internal("trim", self);
  };

  # Writes self to stdout and asks for user input
  func prompt() {
    write(self);
    gets();
  };

  # Writes self to stdout and ask for a single char
  func promptc() {
    write(self);
    getc();
  };

  # Writes self to stdout and ask for user input
  # Input will be casted to a numeric
  func promptn() {
    write(self);
    gets().to_n();
  };

  # Return each char in a string
  func each(callback) {
    let i = 0;
    let count = self.length();

    while (i < count) {
      callback(self[i], i);
      i = i + 1;
    };

    self;
  };

  # Reverse a string
  func reverse() {
    let new = "";
    self.each(func(c) {
      new = c + new;
    });
    new;
  };

  # Filter out unwanted characters from a string
  func filter(filter) {
    let new = "";
    self.each(func(c) {
      if (filter(c)) {
        new = new + c;
      };
    });
    new;
  };

  # Return a substring from an index
  func substring(start, end) {
    let length = self.length();
    let i = start;
    let new = "";
    while (i < end) {
      let char = self[i];
      if (char) {
        new = new + self[i];
      };
      i = i + 1;
    };
    new;
  };

  # Map over a function
  # Similar to each, but replaces each char with the result of the callback
  func map(callback) {
    let new = "";
    self.each(func(c) {
      new = new + callback(c);
    });
    new;
  };

  # Returns true if the string is empty
  func empty() {
    self.length() == 0;
  };

  # Returns an array of numbers representing this char
  # If the char is a unicode char the array will contain 2 numbers and so on
  func ord() {
    call_internal("ord", self);
  };
};
