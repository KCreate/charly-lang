func print(arg) {
    call_internal("print", arg);
};

func Number(arg) {
    call_internal("Number", arg);
};

func String(arg) {
    call_internal("String", arg);
};

func gets() {
    call_internal("gets");
};

func chomp(string) {
    call_internal("String", string);
};

func sleep(amount) {
    call_internal("sleep", amount);
};

func variable(id) {
    call_internal("variable", id);
};

func print_color(arg, color_code) {
    call_internal("print_color", arg, color_code);
};

func test(comp1, comp2, title) {
    let result = comp1 == comp2;
    if (result) {
        print_color(title + " passed!", 32);
    } else {
        print_color(title + " failed!", 31);
        print_color("Expected: " + String(comp2) + ", got: " + String(comp1), 31);
    };

    # Return the result
    result;
};

func repeat(times, callback) {
    let i = 0;
    while (i < times) {
        callback(i);
        i = i + 1;
    };
};

func range(start, end, callback) {
    let i = start;
    while (i < end) {
        callback(i);
        i = i + 1;
    };
};

func array_of_size(size) {
    call_internal("array_of_size", size);
};

func length(array) {
    call_internal("length", array);
};

func each(array, callback) {
    let i = 0;
    let arrayCount = length(array);
    while (i < arrayCount) {
        callback(array(i), i);
        i = i + 1;
    };
    array;
};

func append(array, value) {

    # Create the new array
    let new_array = array_of_size(length(array) + 1);

    # Copy the old values into the new array
    each(array, func cb(e, i) {
        new_array(i) = e;
    });

    # Add the new value
    let last_index = length(new_array) - 1;
    new_array(last_index) = value;

    new_array;
};
