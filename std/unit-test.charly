class UnitTest {

    # A single test defined in the it function
    class Test {
        let title;
        let assertions = [];
        let failed_assertions = [];

        func constructor(_title) {
            title = _title;
        };

        func add_assertion(real, expect) {
            let match = real == expect;

            assertions = append(assertions, [
                real,
                expect,
                match
            ]);

            if (match ! true) {
                failed_assertions = append(failed_assertions, last(assertions));
            };
        };

        func passed() {
            length(failed_assertions) == 0;
        };
    };

    # A single suite
    # contains a list of tests
    class Suite {
        let title;
        let tests = [];
        let failed_tests = [];

        func constructor(_title) {
            title = _title;
        };

        func add_test(test) {
            tests = append(tests, test);

            if (test.passed() ! true) {
                failed_tests = append(failed_tests, test);
            };
        };

        func passed() {
            length(failed_tests) == 0;
        };
    };

    let title;
    let suites = [];
    let failed_suites = [];

    func constructor(_title) {
        title = _title;
    };

    func passed() {
        length(failed_suites) == 0;
    };

    # Begin a new series of connected test-suites
    func begin(callback) {

        # Get the current time for statistics later on
        let start_time = time_ms();

        # Run all tests
        callback(func describe(description, callback) {
            let current_suite = new(Suite, description);

            print(colorize("Suite: " + description, 33));
            callback(func it(description, callback) {
                let current_test = new(Test, description);

                dump(colorize("Test: " + description + " ", 37));
                callback(func assert(real, expect) {
                    current_test.add_assertion(real, expect);

                    null;
                });

                if (current_test.passed()) {
                    dump(colorize("Passed", 32));
                } else {
                    dump(colorize("Failed", 31));
                };
                print("");

                current_suite.add_test(current_test);

                null;
            });
            print("");

            # Add the current_suite to the suites array
            suites = append(suites, current_suite);

            if (current_suite.passed() ! true) {
                failed_suites = append(failed_suites, current_suite);
            };

            null;
        });

        # Gather some statistics
        let passed = true;

        let suites_run = 0;
        let tests_run = 0;
        let assertions_run = 0;
        let total_time = time_ms() - start_time;

        # Extract the data
        each(suites, func(suite, s_index) {

            suites_run = suites_run + 1;
            each(suite.tests, func(test, t_index) {

                tests_run = tests_run + 1;
                each(test.assertions, func(assertion, a_index) {

                    assertions_run = assertions_run + 1;
                    if (assertion(2) == false) {
                        passed = false;
                    };
                });
            });
        });

        # Show the statistics
        if (passed) {
            print(colorize("All test-suites have passed!", 32));
        } else {
            print(colorize("# Some test-suites have failed!", 31));

            # Show all failed assertions in a nice graph
            each(failed_suites, func(suite) {

                print("- " + colorize(suite.title, 33));
                each(suite.failed_tests, func(test) {

                    print("  - " + colorize(test.title, 37));
                    each(test.failed_assertions, func(assertion) {
                        print("    -" + colorize("Expected: " + String(assertion(1)) + ", got: " + String(assertion(0)), 31));
                    });
                });
            });

            print("");
        };
        print("Ran " + colorize(suites_run, 33) + " Suites");
        print("Ran " + colorize(tests_run, 33) + " Tests");
        print("Ran " + colorize(assertions_run, 33) + " Assertions");
        print("Total time: " + colorize(String(total_time), 33) + " miliseconds");

        # Return 0 if all tests passed
        # 1 if at least one failed
        if (passed) {
            0;
        } else {
            1;
        };
    };
};
