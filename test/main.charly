let UnitTest = require("unit-test");

let testResult = UnitTest("Charly").begin(func(describe) {

  describe("Including external files", func(it) {

    it("includes a file", func(assert) {
      assert(include("external.charly").num, 25);
      assert(include("external.charly").num, 25);

      assert(include("external.charly").increment(0), 1);
      assert(include("external.charly").increment(0), 1);
    });

    it("requires a file", func(assert) {
      assert(require("external.charly").num, 25);
      assert(require("external.charly").num, 25);

      let external = require("external.charly");
      external.num = 50;

      assert(require("external.charly").num, 50);

      # Reset for further tests
      external.num = 25;
    });

    it("includes a file that's already required", func(assert) {
      let external = require("external.charly");
      external.num = 50;

      assert(require("external.charly") == external, true);
      assert(require("external.charly").num, 50);
      assert(include("external.charly").num, 25);

      # Reset for further tests
      external.num = 25;
    });

    it("includes core modules", func(assert) {
      let io = include("io");
      assert(!!io.stdout.print, true);
      assert(!!io.stderr.write, true);
      assert(!!io.stdin.getc, true);
    });

  });

  describe("Variables", func(it) {

    it("assigns a value to a variable", func(assert) {
      let my_string = "Hello World";
      let my_number = 25;
      let my_bool = false;
      let my_array = [1, "Whatsup", false];
      let my_null = null;

      assert(my_string, "Hello World");
      assert(my_number, 25);
      assert(my_bool, false);
      assert(my_array[1], "Whatsup");
      assert(my_null, null);
    });

    it("resolves variables in calculations", func(assert) {
      let first_number = 25;
      let second_number = 5;

      assert(first_number + second_number, 30);
    });

    it("primitives are always passed by value", func(assert) {
      let a = 5;
      let b = a;
      a = 30;

      assert(a, 30);
      assert(b, 5);
    });

  });

  describe("Arithmetic operations", func(it) {

    it("adds numbers", func(assert) {
      assert(2 + 2, 4);
      assert(10 + -50, -40);
      assert(2.5 + 9.7, 12.2);
      assert(-20.5 + 20.5, 0);
      assert(999.999 + 999.999, 1999.998);
    });

    it("subtracts numbers", func(assert) {
      assert(20 - 5, 15);
      assert(3 - 3, 0);
      assert(-5 - 9, -14);
      assert(-0 - -0, 0);
      assert(-20 - -90, 70);
    });

    it("multiplies numbers", func(assert) {
      assert(2 * 0, 0);
      assert(2 * 5, 10);
      assert(3 * 25, 75);
      assert(9 * -50, -450);
      assert(0.5 * 5, 2.5);
    });

    it("divides numbers", func(assert) {
      assert(5 / 0, null);
      assert(5 / -2, -2.5);
      assert(10 / 4, 2.5);
      assert(100 / 8, 12.5);
      assert(1 / 2, 0.5);
    });

    it("modulus operator", func(assert) {
      assert(6 % 3, 0);
      assert(0 % 0, null);
      assert(177 % 34, 7);
      assert(700 % 200, 100);
      assert(20 % 3, 2);
    });

    it("pow operator", func(assert) {
      assert(2**8, 256);
      assert(50**3, 125000);
      assert(2**4, 16);
      assert(50**1, 50);
      assert(50**0, 1);
    });

  });

  describe("Comparisons", func(it) {

    it("compares numerics", func(assert) {
      assert(2 == 2, true);
      assert(20 == 20, true);
      assert(-200 == -200, true);
      assert(2.2323 == 2.2323, true);
      assert(9.666 == 9.666, true);
      assert(-0 == -0, true);
      assert(-0 == 0, true);
    });

    it("compares booleans", func(assert) {
      assert(false == false, true);
      assert(false == true, false);
      assert(true == false, false);
      assert(true == true, true);

      assert(0 == false, true);
      assert(1 == true, true);
      assert(-1 == true, true);
      assert("" == true, true);
      assert("test" == true, true);
      assert([] == true, true);
      assert([1, 2] == true, true);
      assert(null == false, true);
      assert({ let name = "leonard"; } == true, true);
      assert(func() {} == true, true);
      assert(class Test {} == true, true);
    });

    it("compares strings", func(assert) {
      assert("test" == "test", true);
      assert("" == "", true);
      assert("leeöäüp" == "leeöäüp", true);
      assert("2002" == "2002", true);
      assert("asdlkasd" == "asdlkasd", true);
    });

    it("compares objects", func(assert) {
      assert({} == {}, false);
      assert({ let a = 1; } == {}, false);
      assert({} == { let a = 1; }, false);
      assert({ let a = 1; } == { let a = 1; }, false);

      let me = {
        let name = "Leonard";
      };

      assert(me == me, true);
      assert(me.name == me.name, true);
    });

    it("compares functions", func(assert) {
      assert(func() {} == func() {}, false);
      assert(func(arg) {} == func(arg) {}, false);
      assert(func(arg) { arg + 1; } == func(arg) { arg + 1; }, false);
      assert(func() { 2; } == func(){ 2; }, false);
    });

    it("does misc. comparisons", func(assert) {
      assert(null == null, true);
      assert(null ! null, false);
    });

    it("compares non equals", func(assert) {
      assert(2 == 4, false);
      assert(10 == 20, false);
      assert(2.5 == 2.499999, false);
      assert(-20 == 20, false);
      assert(2 == 20, false);

      assert(2 ! 4, true);
      assert(10 ! 20, true);
      assert(2.5 ! 2.499999, true);
      assert(-20 ! 20, true);
      assert(2 ! 20, true);
    });

    it("compares using >", func(assert) {
      assert(2 > 5, false);
      assert(10 > 10, false);
      assert(20 > -20, true);
      assert(4 > 3, true);
      assert(0 > -1, true);

      assert("test" > "test", false);
      assert("whatsup" > "whatsu", true);
      assert("test" > 2, false);
      assert("test" > "tes", true);
      assert(2 > "asdadasd", false);
      assert("" > "", false);
      assert(false > true, false);
      assert(25000 > false, false);
      assert(000.222 > "000.222", false);
      assert(null > "lol", false);
    });

    it("compares using <", func(assert) {
      assert(2 < 5, true);
      assert(10 < 10, false);
      assert(20 < -20, false);
      assert(4 < 3, false);
      assert(0 < -1, false);

      assert("test" < "test", false);
      assert("whatsup" < "whatsu", false);
      assert("test" < 2, false);
      assert("test" < "tes", false);
      assert(2 < "asdadasd", false);
      assert("" < "", false);
      assert(false < true, false);
      assert(25000 < false, false);
      assert(000.222 < "000.222", false);
      assert(null < "lol", false);
    });

    it("compares using >=", func(assert) {
      assert(5 >= 2, true);
      assert(10 >= 10, true);
      assert(20 >= 20, true);
      assert(4 >= 3, true);
      assert(0 >= -1, true);

      assert("test" >= "test", true);
      assert("whaaatsup" >= "whatsup", true);
      assert("lol" >= "lol", true);
      assert("abc" >= "def", true);
      assert("small" >= "reaaalllybiiig", false);
    });

    it("compares using <=", func(assert) {
      assert(2 <= 5, true);
      assert(10 <= 10, true);
      assert(20 <= -20, false);
      assert(4 <= 3, false);
      assert(200 <= 200, true);

      assert("test" <= "test", true);
      assert("whaaatsup" <= "whatsup", false);
      assert("lol" <= "lol", true);
      assert("abc" <= "def", true);
      assert("small" <= "reaaalllybiiig", true);
    });

    it("not operator inverts a value", func(assert) {
      assert(!false, true);
      assert(!true, false);
      assert(!0, true);
      assert(!25, false);
      assert(!"test", false);
    });

  });

  describe("Arrays", func(it) {

    it("does member expressions", func(assert) {
      let nums = [1, 2, 3, 4];

      assert(nums[0], 1);
      assert(nums[3], 4);
      assert(nums[10], null);
      assert(nums[-10], null);
    });

    it("does multilevel member expressions", func(assert) {
      let nums = [[1, 2], [3, 4, "test"], [5, 6]];

      assert(nums[0][1], 2);
      assert(nums[2][0], 5);
      assert(nums[1][2], "test");
      assert(nums[1][-2], null);
    });

    it("write to an index", func(assert) {
      let nums = [1, 2, 3, 4];

      nums[0] = 2;
      nums[1] = 3;
      nums[2] = 4;

      assert(nums[0], 2);
      assert(nums[1], 3);
      assert(nums[2], 4);
      assert(nums[3], 4);
    });

    it("writes to a nested index", func(assert) {
      let nums = [1, 2, [3, 4]];

      nums[0] = 2;
      nums[1] = 3;
      nums[2][0] = 4;
      nums[2][1] = 5;

      assert(nums[0], 2);
      assert(nums[1], 3);
      assert(nums[2][0], 4);
      assert(nums[2][1], 5);
    });

    it("gives back the length", func(assert) {
      assert([].length(), 0);
      assert([1, 2].length(), 2);
      assert([1, 2, [3, 4]].length(), 3);
      assert([1, 2, 3, [4, 5]][3].length(), 2);
      assert(["test"].length(), 1);
    });

    it("iterates via each", func(assert) {
      let got = [];
      let nums = [1, 2, 3, 4];

      nums.each(func(v) {
        got.push(v);
      });

      assert(got[0], nums[0]);
      assert(got[1], nums[1]);
      assert(got[2], nums[2]);
      assert(got[3], nums[3]);
    });

    it("iterates via map", func(assert) {
      let nums = [1, 2, 3, 4];

      nums.map(func(n) {
        n**2;
      });

      assert(nums[0], 1);
      assert(nums[1], 4);
      assert(nums[2], 9);
      assert(nums[3], 16);
    });

    it("converts all items to strings", func(assert) {
      let nums = [1, 2, 3, 4];

      nums = nums.all_to_s();

      assert(nums[0], "1");
      assert(nums[1], "2");
      assert(nums[2], "3");
      assert(nums[3], "4");
    });

    it("creates a new array using Array.of_size", func(assert) {
      let new_array = Array.of_size(100, "whaaaaaaaaaaaaaaaaaat");
      assert(new_array.length(), 100);
    });

    it("appends to the end", func(assert) {
      let nums = [1, 2];

      nums.push(3);
      nums.push(4);
      nums.push(5);
      nums.push(6);

      assert(nums.length(), 6);
      assert(nums[0], 1);
      assert(nums[1], 2);
      assert(nums[2], 3);
      assert(nums[3], 4);
      assert(nums[4], 5);
      assert(nums[5], 6);
    });

    it("append to the beginning", func(assert) {
      let nums = [1, 2];

      nums.unshift(3);
      nums.unshift(4);
      nums.unshift(5);
      nums.unshift(6);

      assert(nums.length(), 6);
      assert(nums[0], 6);
      assert(nums[1], 5);
      assert(nums[2], 4);
      assert(nums[3], 3);
      assert(nums[4], 1);
      assert(nums[5], 2);
    });

    it("inserts at a given index", func(assert) {
      let nums = [1, 2];

      nums.insert(0, 3);
      nums.insert(1, 4);
      nums.insert(-200, 5);
      nums.insert(1000, 6);
      nums.insert(4, 7);

      assert(nums.length(), 7);
      assert(nums[0], 5);
      assert(nums[1], 3);
      assert(nums[2], 4);
      assert(nums[3], 1);
      assert(nums[4], 7);
      assert(nums[5], 2);
    });

    it("deletes a given index", func(assert) {
      let nums = [1, 2, 3, 4, 5];

      nums.delete(0);
      nums.delete(3);
      nums.delete(1);

      assert(nums.length(), 2);
      assert(nums[0], 2);
      assert(nums[1], 4);
    });

    it("returns the first element", func(assert) {
      assert([].first(), null);
      assert([1, 2].first(), 1);
      assert([[1]].first()[0], 1);
    });

    it("returns the last element", func(assert) {
      assert([].last(), null);
      assert([1, 2, 3].last(), 3);
      assert([1].last(), 1);
      assert([[1, 2]].last()[1], 2);
    });

    it("concatenates two arrays", func(assert) {
      let num1 = [1, 2];
      let num2 = [3, 4];

      let num3 = num1 + num2;

      assert(num3[0], 1);
      assert(num3[1], 2);
      assert(num3[2], 3);
      assert(num3[3], 4);
    });

    it("flattens an array", func(assert) {
      let num = [1, [2, [3], 4], 5, [[6], 7], 8];

      num = num.flatten();

      assert(num.length(), 8);

      assert(num[0], 1);
      assert(num[1], 2);
      assert(num[2], 3);
      assert(num[3], 4);
      assert(num[4], 5);
      assert(num[5], 6);
      assert(num[6], 7);
      assert(num[7], 8);
    });

  });

  describe("Numerics", func(it) {

    it("implicitly casts integers to floats", func(assert) {
      assert(2 == 2.0, true);
      assert(2000.0000 == 2000, true);
      assert(-289 == -289.0, true);
      assert(0 == 0.0, true);
      assert(0000000000.000000000 == 0, true);
    });

    it("calls times", func(assert) {
      let sum = 0;
      500.times(func(i) {
        sum = sum + i;
      });

      assert(sum, 124750);
    });

    it("calls downto", func(assert) {
      let sum = 0;
      10.downto(0, func(n) {
        sum = sum + n;
      });

      assert(sum, 55);
    });

  });

  describe("Strings", func(it) {

    it("returns the length of a string", func(assert) {
      assert("hello world".length(), 11);
      assert("hello".length(), 5);
      assert("ääöü".length(), 4);
      assert("".length(), 0);
    });

    it("concatenates strings", func(assert) {
      assert("hello" + "world", "helloworld");
      assert("hello" + " wonderful " + "world", "hello wonderful world");
      assert("öö" + "üä", "ööüä");
      assert("" + "", "");
    });

    it("concatenates strings and numerics", func(assert) {
      assert("test" + 16, "test16");
      assert("test" + 16.263723762, "test16.263723762");
      assert("test" + 0.001, "test0.001");
      assert("test" + 2.5, "test2.5");
      assert("test" + 2.0, "test2");

      assert(2 + "test", "2test");
      assert(2.5 + "test", "2.5test");
      assert(0.010 + "test", "0.01test");
      assert(28.2 + "test", "28.2test");
      assert(50 + "test" + 25, "50test25");
    });

    it("multiplies strings", func(assert) {
      assert("test" * 3, "testtesttest");
      assert(" " * 3, "   ");
      assert("a" * 10, "aaaaaaaaaa");
      assert("a" * 1.5, "a");
      assert("a" * 1.999, "a");
    });

    it("trims whitespace off the beginning and end", func(assert) {
      assert("   hello  ".trim(), "hello");
      assert("         adad   ".trim(), "adad");
      assert("    asdadasd\n\nasdasd   ".trim(), "asdadasd\n\nasdasd");
      assert("äääüö\n\n\nlol".trim(), "äääüö\n\n\nlol");
    });

    it("iterates over all chars", func(assert) {
      let name = "hello";
      let chars = [];

      name.each(func(char) {
        chars.push(char);
      });

      assert(chars.length(), name.length());

      assert(chars[0], "h");
      assert(chars[1], "e");
      assert(chars[2], "l");
      assert(chars[3], "l");
      assert(chars[4], "o");
    });

  });

  describe("Functions", func(it) {

    it("calls a function", func(assert) {
      let called = false;
      func call_me() {
        called = true;
      };
      call_me();

      assert(called, true);
    });

    it("passes arguments to a function", func(assert) {
      let arg1;
      let arg2;
      func call_me(_arg1, _arg2) {
        arg1 = _arg1;
        arg2 = _arg2;
      };
      call_me("hello", 25);

      assert(arg1, "hello");
      assert(arg2, 25);
    });

    it("creates the __argument variable", func(assert) {
      let args_received;
      func call_me() {
        args_received = __arguments;
      };
      call_me("hello", "world", "this", "should", "work");

      assert(args_received[0], "hello");
      assert(args_received[2], "this");
      assert(args_received[4], "work");
    });

    it("__argument variable can be overwritten", func(assert) {
      let args_received;
      func call_me(__arguments) {
        args_received = __arguments;
      };
      call_me("hello", "world", "this", "should", "work");

      assert(args_received, "hello");
    });

    it("can access the parent scope", func(assert) {
      let change_me = false;
      func call_me() {
        change_me = true;
      };
      call_me();

      assert(change_me, true);
    });

    it("writes to arguments instead of parent scope", func(assert) {
      let dont_change_me = false;
      func call_me(dont_change_me) {
        dont_change_me = true;
      };
      call_me(true);

      assert(dont_change_me, false);
    });

    it("runs callbacks in the right scope", func(assert) {
      let change_me = false;

      func call_me(callback) {
        let change_me = 25;
        callback();
      };

      call_me(func() {
        change_me = true;
      });

      assert(change_me, true);
    });

    it("consecutive call expressions", func(assert) {
      func call_me() {
        func() {
          func() {
            25;
          };
        };
      };

      assert(call_me()()(), 25);
    });

    it("passes arguments in the right order", func(assert) {
      let f1;
      let f2;
      let f3;

      func(a1) {
        func(a2) {
          func(a3) {
            f1 = a1;
            f2 = a2;
            f3 = a3;
          };
        };
      }(1)(2)(3);

      assert(f1, 1);
      assert(f2, 2);
      assert(f3, 3);
    });

    it("gives functions the correct self pointer", func(assert) {
      let box = {
        let val = "in box";

        func foo() {
          got = self.val;
        };
      };

      let got = null;
      box.foo();

      assert(got, "in box");
    });

    it("gives direct function calls the correct self pointer", func(assert) {
      let box = {
        let val = "in box";

        func foo() {
          func bar() {
            got = self.val;
          };

          bar();
        };
      };

      let got = null;
      box.foo();

      assert(got, "in box");
    });

    it("callbacks receive the correct self pointer", func(assert) {
      func foo(callback) {
        callback();
      };

      let box = {
        let val = "in box";

        func bar() {
          foo(func() {
            got = self.val;
          });
        };
      };

      let got = null;
      box.bar();

      assert(got, "in box");
    });

    it("assigned functions receive the correct self pointer", func(assert) {
      let box = {
        let val = "in box";
      };

      box.foo = func() {
        got = self.val;
      };

      let got = null;
      box.foo();

      assert(got, "in box");
    });

    it("functions in nested objects get the correct self pointer", func(assert) {
      let box = {
        let val = "upper box";

        let foo = {
          let val = "inner box";

          func bar() {
            got = self.val;
          };
        };
      };

      let got = null;
      box.foo.bar();

      assert(got, "inner box");
    });

    it("assigned functions in nested objects get the correct self pointer", func(assert) {
      let box = {
        let val = "upper box";

        let foo = {
          let val = "inner box";
        };
      };

      let got = null;

      box.foo.bar = func bar() {
        got = self.val;
      };

      box.foo.bar();

      assert(got, "inner box");
    });

  });

  describe("Classes", func(it) {

    it("creates a new class", func(assert) {
      class Person {
        let name;
        let age;

        func constructor(name, age) {
          self.name = name;
          self.age = age;
        };
      };

      let leonard = Person("Leonard", 16);
      let peter = Person("Peter", 20);

      assert(leonard.name, "Leonard");
      assert(leonard.age, 16);
      assert(peter.name, "Peter");
      assert(peter.age, 20);
    });

    it("calls functions inside classes", func(assert) {
      class Box {
        let value;
        func set(value) {
          self.value = value;
        };
      };

      let myBox = Box();
      assert(myBox.value, null);
      myBox.set("this works");
      assert(myBox.value, "this works");
    });

    it("doesn't read from the parent stack", func(assert) {
      class Box {};
      let myBox = Box();

      let changed = false;
      assert(myBox.changed, null);
    });

    it("doesn't write into the parent stack", func(assert) {
      class Box {};
      let myBox = Box();

      let changed = false;
      myBox.changed = true;

      assert(changed, false);
    });

    it("can access self inside class blocks", func(assert) {
      class Box {
        self.name = "test";
      };

      let myBox = Box();
      assert(myBox.name, "test");
    });

  });

  describe("Objects", func(it) {

    it("can override native methods", func(assert) {
      let leonard = {
        let name;
        let age;

        func to_s() {
          name + " is " + age + " years old!";
        };
      };
      leonard.name = "Leonard";
      leonard.age = 16;

      let text = leonard.to_s();
      assert(text, "Leonard is 16 years old!");
    });

    it("adds properties to objects", func(assert) {
      class Box {};
      let myBox = Box();
      myBox.name = "Leonard";
      myBox.age = 16;

      assert(myBox.name, "Leonard");
      assert(myBox.age, 16);
    });

    it("adds functions to objects", func(assert) {
      class Box {};
      let myBox = Box();
      myBox.name = "Leonard";
      myBox.age = 16;
      myBox.to_s = func() {
        assert(self == myBox, true);
        self.do_stuff = func() {
          "it works!";
        };

        self.name + " - " + self.age;
      };

      assert(myBox.name, "Leonard");
      assert(myBox.age, 16);
      assert(myBox.do_stuff, null);
      assert(myBox.to_s(), "Leonard - 16");
      assert(myBox.do_stuff(), "it works!");
    });

    it("overrides the self identifier", func(assert) {
      class Box {
        let name = "test";

        func stuff(self) {
          self.name = "world";
        };
      };

      let person = { let name = "hello"; };
      let myBox = Box();

      assert(myBox.name, "test");
      assert(person.name, "hello");

      myBox.stuff(person);

      assert(myBox.name, "test");
      assert(person.name, "world");
    });

    it("has a reference to the correct object", func(assert) {
      class Box {
        class SubBox {
          let name = "test";

          func doStuff() {
            self.name = "changed as well";
          };
        };

        func doStuff() {
          self.name = "changed";
        };

        let name = "hello world";
        let mybox = SubBox();
      };

      let myBox = Box();

      assert(myBox.name, "hello world");
      assert(myBox.mybox.name, "test");

      myBox.doStuff();

      assert(myBox.name, "changed");
      assert(myBox.mybox.name, "test");

      myBox.mybox.doStuff();

      assert(myBox.name, "changed");
      assert(myBox.mybox.name, "changed as well");
    });

    it("can specify the __member method", func(assert) {
      class Box {
        func __member(index) {
          "received: " + index;
        };
      };

      let myBox = Box();
      assert(myBox[0], "received: 0");
      assert(myBox[200], "received: 200");
      assert(myBox[-200], "received: -200");
      assert(myBox["test"], "received: test");
      assert(myBox[[1, 2]], "received: [1, 2]");
    });

    it("calls the __member method with the correct self identifier", func(assert) {
      class Box {
        func __member(index) {
          self;
        };
      };

      let myBox = Box();
      assert(myBox[0] == myBox, true);
      assert(myBox[200] == myBox, true);
      assert(myBox[-200] == myBox, true);
      assert(myBox["test"] == myBox, true);
      assert(myBox[[1, 2]] == myBox, true);
    });

    it("can specifiy the __member_write method", func(assert) {
      class Box {
        func __member_write(index, value) {
          "received: " + index.to_s() + " and " + value;
        };
      };

      let myBox = Box();

      assert(myBox[0] = 1, "received: 0 and 1");
      assert(myBox[200] = 20, "received: 200 and 20");
      assert(myBox[-200] = 500, "received: -200 and 500");
      assert(myBox["test"] = "hello", "received: test and hello");
      assert(myBox["test", 2] = "hello", "received: test and 2");
      assert(myBox[[1, 2]] = false, "received: [1, 2] and false");
    });

    it("calls the __member_write method with the correct self identifier", func(assert) {
      class Box {
        func __member_write(index, value) {
          self;
        };
      };

      let myBox = Box();

      assert((myBox[0] = 1) == myBox, true);
      assert((myBox[200] = 20) == myBox, true);
      assert((myBox[-200] = 500) == myBox, true);
      assert((myBox["test"] = "hello") == myBox, true);
      assert((myBox[[1, 2]] = false) == myBox, true);
    });

    it("redirects arithmetic operators", func(assert) {
      let myBox = {
        func __plus(element) { "plus"; };
        func __minus(element) { "minus"; };
        func __mult(element) { "mult"; };
        func __divd(element) { "divd"; };
        func __mod(element) { "mod"; };
        func __pow(element) { "pow"; };
      };

      assert(myBox + 1, "plus");
      assert(myBox - 1, "minus");
      assert(myBox * 1, "mult");
      assert(myBox / 1, "divd");
      assert(myBox % 1, "mod");
      assert(myBox ** 1, "pow");
    });

    it("redirects comparison operators", func(assert) {
      let myBox = {
        func __less(element) { "less"; };
        func __greater(element) { "greater"; };
        func __lessequal(element) { "lessequal"; };
        func __greaterequal(element) { "greaterequal"; };
        func __equal(element) { "equal"; };
        func __notequal(element) { "notequal"; };
      };

      assert(myBox < 1, "less");
      assert(myBox > 1, "greater");
      assert(myBox <= 1, "lessequal");
      assert(myBox >= 1, "greaterequal");
      assert(myBox == 1, "equal");
      assert(myBox ! 1, "notequal");
    });

    it("redirects unary operators", func(assert) {
      let myBox = {
        func __uminus() { "uminus"; };
        func __unot() { "unot"; };
      };

      assert(-myBox, "uminus");
      assert(!myBox, "unot");
    });

  });

  describe("While loops", func(it) {

    it("runs for the specified count", func(assert) {
      let sum = 0;
      let index = 0;
      while (index < 500) {
        sum = sum + index;
        index = index + 1;
      };

      assert(sum, 124750);
    });

  });

  describe("Misc. standard library functions", func(it) {

    it("returns the type of a variable", func(assert) {
      assert(false.type(), "Boolean");
      assert(true.type(), "Boolean");
      assert("test".type(), "String");
      assert(25.type(), "Numeric");
      assert(25.5.type(), "Numeric");
      assert([1, 2, 3].type(), "Array");
      assert((class Test {}).type(), "Class");
      assert((func() {}).type(), "Function");
      assert({}.type(), "Object");
      assert(null.type(), "Null");
    });

    it("casts string to numeric", func(assert) {
      assert("25".to_n(), 25);
      assert("25.5".to_n(), 25.5);
      assert("0".to_n(), 0);
      assert("100029".to_n(), 100029);
      assert("-89.2".to_n(), -89.2);

      assert("hello".to_n(), null);
      assert("25test".to_n(), 25);
      assert("ermokay30".to_n(), null);
      assert("-2.25this".to_n(), -2.25);

      assert("123.45e2".to_n(), 12345);
      assert("2e5".to_n(), 200_000);
      assert("25e-5".to_n(), 0.00025);
      assert("9e-2".to_n(), 0.09);
    });

  });

  describe("ARGV", func(it) {

    it("receives an argument called ARGV", func(assert) {
      assert(ARGV.type(), "Array");
      assert(ARGV.length(), 0);
    });

  });

});

exit(testResult);
