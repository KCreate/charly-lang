let UnitTest = require("unit-test");

let testResult = UnitTest("Charly").begin(func(describe) {

  describe("Including external files", func(it) {

    it("includes a file", func(assert) {
      assert(include("external.charly").num, 25);
      assert(include("external.charly").num, 25);

      assert(include("external.charly").increment(0), 1);
      assert(include("external.charly").increment(0), 1);
    });

    it("requires a file", func(assert) {
      assert(require("external.charly").num, 25);
      assert(require("external.charly").num, 25);

      let external = require("external.charly");
      external.num = 50;

      assert(require("external.charly").num, 50);

      # Reset for further tests
      external.num = 25;
    });

    it("includes a file that's already required", func(assert) {
      let external = require("external.charly");
      external.num = 50;

      assert(require("external.charly") == external, true);
      assert(require("external.charly").num, 50);
      assert(include("external.charly").num, 25);

      # Reset for further tests
      external.num = 25;
    });

    it("includes core modules", func(assert) {
      let io = include("io");
      assert(!!io.stdout.print, true);
      assert(!!io.stderr.write, true);
      assert(!!io.stdin.getc, true);

      let array = include("array");
      assert(!!array.each, true);
    });

  });

  describe("Variables", func(it) {

    it("assigns a value to a variable", func(assert) {
      let my_string = "Hello World";
      let my_number = 25;
      let my_bool = false;
      let my_array = [1, "Whatsup", false];
      let my_null = null;

      assert(my_string, "Hello World");
      assert(my_number, 25);
      assert(my_bool, false);
      assert(my_array[1], "Whatsup");
      assert(my_null, null);
    });

    it("resolves variables in calculations", func(assert) {
      let first_number = 25;
      let second_number = 5;

      assert(first_number + second_number, 30);
    });

    it("primitives are always passed by value", func(assert) {
      let a = 5;
      let b = a;
      a = 30;

      assert(a, 30);
      assert(b, 5);
    });

  });

  describe("Arithmetic operations", func(it) {

    it("adds numbers", func(assert) {
      assert(2 + 2, 4);
      assert(10 + -50, -40);
      assert(2.5 + 9.7, 12.2);
      assert(-20.5 + 20.5, 0);
      assert(999.999 + 999.999, 1999.998);
    });

    it("subtracts numbers", func(assert) {
      assert(20 - 5, 15);
      assert(3 - 3, 0);
      assert(-5 - 9, -14);
      assert(-0 - -0, 0);
      assert(-20 - -90, 70);
    });

    it("multiplies numbers", func(assert) {
      assert(2 * 0, 0);
      assert(2 * 5, 10);
      assert(3 * 25, 75);
      assert(9 * -50, -450);
      assert(0.5 * 5, 2.5);
    });

    it("divides numbers", func(assert) {
      assert(5 / 0, null);
      assert(5 / -2, -2.5);
      assert(10 / 4, 2.5);
      assert(100 / 8, 12.5);
      assert(1 / 2, 0.5);
    });

    it("modulus operator", func(assert) {
      assert(6 % 3, 0);
      assert(0 % 0, null);
      assert(177 % 34, 7);
      assert(700 % 200, 100);
      assert(20 % 3, 2);
    });

    it("pow operator", func(assert) {
      assert(2**8, 256);
      assert(50**3, 125000);
      assert(2**4, 16);
      assert(50**1, 50);
      assert(50**0, 1);
    });

  });

  describe("Comparisons", func(it) {

    it("compares numerics", func(assert) {
      assert(2 == 2, true);
      assert(20 == 20, true);
      assert(-200 == -200, true);
      assert(2.2323 == 2.2323, true);
      assert(9.666 == 9.666, true);
      assert(-0 == -0, true);
      assert(-0 == 0, true);
    });

    it("compares booleans", func(assert) {
      assert(false == false, true);
      assert(false == true, false);
      assert(true == false, false);
      assert(true == true, true);

      assert(0 == false, true);
      assert(1 == true, true);
      assert(-1 == true, true);
      assert("" == true, true);
      assert("test" == true, true);
      assert([] == true, true);
      assert([1, 2] == true, true);
      assert(null == false, true);
      assert({ let name = "leonard"; } == true, true);
      assert(func(){} == true, true);
      assert(class Test {} == true, true);
    });

    it("compares strings", func(assert) {
      assert("test" == "test", true);
      assert("" == "", true);
      assert("leeöäüp" == "leeöäüp", true);
      assert("2002" == "2002", true);
      assert("asdlkasd" == "asdlkasd", true);
    });

    it("compares objects", func(assert) {
      assert({} == {}, false);
      assert({ let a = 1; } == {}, false);
      assert({} == { let a = 1; }, false);
      assert({ let a = 1; } == { let a = 1; }, false);

      let me = {
        let name = "Leonard";
      };

      assert(me == me, true);
      assert(me.name == me.name, true);
    });

    it("compares functions", func(assert) {
      assert(func(){} == func(){}, false);
      assert(func(arg){} == func(arg){}, false);
      assert(func(arg){ arg + 1; } == func(arg){ arg + 1; }, false);
      assert(func(){ 2; } == func(){ 2; }, false);
    });

    it("does misc. comparisons", func(assert) {
      assert(null == null, true);
      assert(null ! null, false);
    });

    it("compares non equals", func(assert) {
      assert(2 == 4, false);
      assert(10 == 20, false);
      assert(2.5 == 2.499999, false);
      assert(-20 == 20, false);
      assert(2 == 20, false);

      assert(2 ! 4, true);
      assert(10 ! 20, true);
      assert(2.5 ! 2.499999, true);
      assert(-20 ! 20, true);
      assert(2 ! 20, true);
    });

    it("compares using >", func(assert) {
      assert(2 > 5, false);
      assert(10 > 10, false);
      assert(20 > -20, true);
      assert(4 > 3, true);
      assert(0 > -1, true);

      assert("test" > "test", false);
      assert("whatsup" > "whatsu", true);
      assert("test" > 2, false);
      assert("test" > "tes", true);
      assert(2 > "asdadasd", false);
      assert("" > "", false);
      assert(false > true, false);
      assert(25000 > false, false);
      assert(000.222 > "000.222", false);
      assert(null > "lol", false);
    });

    it("compares using <", func(assert) {
      assert(2 < 5, true);
      assert(10 < 10, false);
      assert(20 < -20, false);
      assert(4 < 3, false);
      assert(0 < -1, false);

      assert("test" < "test", false);
      assert("whatsup" < "whatsu", false);
      assert("test" < 2, false);
      assert("test" < "tes", false);
      assert(2 < "asdadasd", false);
      assert("" < "", false);
      assert(false < true, false);
      assert(25000 < false, false);
      assert(000.222 < "000.222", false);
      assert(null < "lol", false);
    });

    it("compares using >=", func(assert) {
      assert(5 >= 2, true);
      assert(10 >= 10, true);
      assert(20 >= 20, true);
      assert(4 >= 3, true);
      assert(0 >= -1, true);

      assert("test" >= "test", true);
      assert("whaaatsup" >= "whatsup", true);
      assert("lol" >= "lol", true);
      assert("abc" >= "def", true);
      assert("small" >= "reaaalllybiiig", false);
    });

    it("compares using <=", func(assert) {
      assert(2 <= 5, true);
      assert(10 <= 10, true);
      assert(20 <= -20, false);
      assert(4 <= 3, false);
      assert(200 <= 200, true);

      assert("test" <= "test", true);
      assert("whaaatsup" <= "whatsup", false);
      assert("lol" <= "lol", true);
      assert("abc" <= "def", true);
      assert("small" <= "reaaalllybiiig", true);
    });

    it("not operator inverts a value", func(assert) {
      assert(!false, true);
      assert(!true, false);
      assert(!0, true);
      assert(!25, false);
      assert(!"test", false);
    });

  });

  describe("Arrays", func(it) {

    it("does member expressions", func(assert) {
      let nums = [1, 2, 3, 4];

      assert(nums[0], 1);
      assert(nums[3], 4);
      assert(nums[10], null);
      assert(nums[-10], null);
    });

    it("does multilevel member expressions", func(assert) {
      let nums = [[1, 2], [3, 4, "test"], [5, 6]];

      assert(nums[0][1], 2);
      assert(nums[2][0], 5);
      assert(nums[1][2], "test");
      assert(nums[1][-2], null);
    });

    it("write to an index", func(assert) {
      let nums = [1, 2, 3, 4];

      nums[0] = 2;
      nums[1] = 3;
      nums[2] = 4;

      assert(nums[0], 2);
      assert(nums[1], 3);
      assert(nums[2], 4);
      assert(nums[3], 4);
    });

    it("writes to a nested index", func(assert) {
      let nums = [1, 2, [3, 4]];

      nums[0] = 2;
      nums[1] = 3;
      nums[2][0] = 4;
      nums[2][1] = 5;

      assert(nums[0], 2);
      assert(nums[1], 3);
      assert(nums[2][0], 4);
      assert(nums[2][1], 5);
    });

    it("gives back the length of an array", func(assert) {
      assert(length([]), 0);
      assert(length([1, 2]), 2);
      assert(length([1, 2, [3, 4]]), 3);
      assert(length([1, 2, 3, [4, 5]][3]), 2);
      assert(length(["test"]), 1);
    });

    it("creates a new array using array_of_size", func(assert) {
      let new_array = array_of_size(100, "whaaaaaaaaaaaaaaaaaat");
      assert(length(new_array), 100);
    });

    it("appends to an array", func(assert) {
      let nums = [1, 2];
      nums = append(nums, 3);
      nums = append(nums, 4);
      nums = append(nums, 5);
      nums = append(nums, 6);

      assert(length(nums), 6);
      assert(nums[0], 1);
      assert(nums[1], 2);
      assert(nums[2], 3);
      assert(nums[3], 4);
      assert(nums[4], 5);
      assert(nums[5], 6);
    });

  });

  describe("Numerics", func(it) {

    it("implicitly casts integers to floats", func(assert) {
      assert(2 == 2.0, true);
      assert(2000.0000 == 2000, true);
      assert(-289 == -289.0, true);
      assert(0 == 0.0, true);
      assert(0000000000.000000000 == 0, true);
    });

  });

  describe("Strings", func(it) {

    it("returns the length of a string", func(assert) {
      assert(length("hello world"), 11);
      assert(length("hello"), 5);
      assert(length("ääöü"), 4);
      assert(length(""), 0);
    });

    it("concatenates strings", func(assert) {
      assert("hello" + "world", "helloworld");
      assert("hello" + " wonderful " + "world", "hello wonderful world");
      assert("öö" + "üä", "ööüä");
      assert("" + "", "");
    });

    it("concatenates strings and numerics", func(assert) {
      assert("test" + 16, "test16");
      assert("test" + 16.263723762, "test16.263723762");
      assert("test" + 0.001, "test0.001");
      assert("test" + 2.5, "test2.5");
      assert("test" + 2.0, "test2");

      assert(2 + "test", "2test");
      assert(2.5 + "test", "2.5test");
      assert(0.010 + "test", "0.01test");
      assert(28.2 + "test", "28.2test");
      assert(50 + "test" + 25, "50test25");
    });

    it("multiplies strings", func(assert) {
      assert("test" * 3, "testtesttest");
      assert(" " * 3, "   ");
      assert("a" * 10, "aaaaaaaaaa");
      assert("a" * 1.5, "a");
      assert("a" * 1.999, "a");
    });

  });

  describe("Functions", func(it) {

    it("calls a function", func(assert) {
      let called = false;
      func call_me() {
        called = true;
      };
      call_me();

      assert(called, true);
    });

    it("passes arguments to a function", func(assert) {
      let arg1;
      let arg2;
      func call_me(_arg1, _arg2) {
        arg1 = _arg1;
        arg2 = _arg2;
      };
      call_me("hello", 25);

      assert(arg1, "hello");
      assert(arg2, 25);
    });

    it("creates the __argument variable", func(assert) {
      let args_received;
      func call_me() {
        args_received = __arguments;
      };
      call_me("hello", "world", "this", "should", "work");

      assert(args_received[0], "hello");
      assert(args_received[2], "this");
      assert(args_received[4], "work");
    });

    it("__argument variable can be overwritten", func(assert) {
      let args_received;
      func call_me(__arguments) {
        args_received = __arguments;
      };
      call_me("hello", "world", "this", "should", "work");

      assert(args_received, "hello");
    });

    it("can access the parent scope", func(assert) {
      let change_me = false;
      func call_me() {
        change_me = true;
      };
      call_me();

      assert(change_me, true);
    });

    it("writes to arguments instead of parent scope", func(assert) {
      let dont_change_me = false;
      func call_me(dont_change_me) {
        dont_change_me = true;
      };
      call_me(true);

      assert(dont_change_me, false);
    });

    it("runs callbacks in the right scope", func(assert) {
      let change_me = false;

      func call_me(callback) {
        let change_me = 25;
        callback();
      };

      call_me(func() {
        change_me = true;
      });

      assert(change_me, true);
    });

    it("consecutive call expressions", func(assert) {
      func call_me() {
        func() {
          func() {
            25;
          };
        };
      };

      assert(call_me()()(), 25);
    });

    it("passes arguments in the right order", func(assert) {
      let f1;
      let f2;
      let f3;

      func(a1) {
        func(a2) {
          func(a3) {
            f1 = a1;
            f2 = a2;
            f3 = a3;
          };
        };
      }(1)(2)(3);

      assert(f1, 1);
      assert(f2, 2);
      assert(f3, 3);
    });

  });

  describe("Classes", func(it) {

    it("creates a new class", func(assert) {
      class Person {
        let name;
        let age;

        func constructor(_name, _age) {
          name = _name;
          age = _age;
        };
      };

      let leonard = Person("Leonard", 16);
      let peter = Person("Peter", 20);

      assert(leonard.name, "Leonard");
      assert(leonard.age, 16);
      assert(peter.name, "Peter");
      assert(peter.age, 20);
    });

    it("calls functions inside classes", func(assert) {
      class Box {
        let value;
        func set(_value) {
          value = _value;
        };
      };

      let myBox = Box();
      assert(myBox.value, null);
      myBox.set("this works");
      assert(myBox.value, "this works");
    });

    it("doesn't read from the parent stack", func(assert) {
      class Box {};
      let myBox = Box();

      let changed = false;
      assert(myBox.changed, null);
    });

    it("doesn't write into the parent stack", func(assert) {
      class Box {};
      let myBox = Box();

      let changed = false;
      myBox.changed = true;

      assert(changed, false);
    });

  });

  describe("While loops", func(it) {

    it("runs for the specified count", func(assert) {
      let sum = 0;
      let index = 0;
      while (index < 500) {
        sum = sum + index;
        index = index + 1;
      };

      assert(sum, 124750);
    });

  });

  describe("Misc. standard library functions", func(it) {

    it("returns the type of a variable", func(assert) {
      assert(typeof(false), "Boolean");
      assert(typeof(true), "Boolean");
      assert(typeof("test"), "String");
      assert(typeof(25), "Numeric");
      assert(typeof(25.5), "Numeric");
      assert(typeof([1, 2, 3]), "Array");
      assert(typeof(class Test {}), "Class");
      assert(typeof(func() {}), "Function");
      assert(typeof({}), "Object");
      assert(typeof(null), "Null");
    });

    it("repeats a function n times", func(assert) {
      let sum = 0;
      repeat(500, func(i) {
        sum = sum + i;
      });

      assert(sum, 124750);
    });

    it("casts string to numeric", func(assert) {
      assert(to_numeric("25"), 25);
      assert(to_numeric("25.5"), 25.5);
      assert(to_numeric("0"), 0);
      assert(to_numeric("100029"), 100029);
      assert(to_numeric("-89.2"), -89.2);

      assert(to_numeric("hello"), null);
      assert(to_numeric("25test"), 25);
      assert(to_numeric("ermokay30"), null);
      assert(to_numeric("-2.25this"), -2.25);

      assert(to_numeric("123.45e2"), 12345);
      assert(to_numeric("2e5"), 200_000);
      assert(to_numeric("25e-5"), 0.00025);
      assert(to_numeric("9e-2"), 0.09);
    });

  });

});

exit(testResult);
