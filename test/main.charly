func onlyTrueWasPassed() {
    let value = true;

    func callback(bool, method) {
        if (method == "test") {
            if (bool ! true) {
                value = false;
            };
        } else if (method == "result") {
            if (value) {0;} else {1;};
        };
    };
    callback;
};
let run = onlyTrueWasPassed();



# Test variable assignment
let someNumber = 25;
run(test(someNumber, 25, "Variable Assignment"), "test");



# Test string comparisons
let someString = "Hello";
run(test(someString, "Hello", "String comparison"), "test");



# Test writing to index in array
let someArray = [1, 2];
someArray(1) = "it works";
run(test(someArray(1), "it works", "Saving to array index"), "test");



# Test nested array lookup
let someArray2 = [1, [2, 3], 4];
run(test(someArray2(1, 0), 2, "Array index lookup"), "test");



# Get the length different properties
run(test(length([1, 2, 3, [4, 5]]), 4, "Array count function"), "test");
run(test(length("Hello World"), 11, "String count function"), "test");
run(test(length(2), 2, "Numeric count function"), "test");
run(test(length(2000), 2000, "Numeric 2 count function"), "test");



# Test function scoping
let name = "Leonard";
let age = 16;
func something(name) {
    name = "Peter";
    age = 20;
};
something(name);
run(test(name, "Leonard", "Function arguments in own scope"), "test");
run(test(age, 20, "Access to definition scope"), "test");



# Check comparison operators
run(test(2 < 5, true, "Smaller than"), "test");
run(test(2 > 5, false, "Smaller than negated"), "test");

run(test(5 > 2, true, "Greater than"), "test");
run(test(5 < 2, false, "Greater than negated"), "test");

run(test(5 <= 5, true, "Smaller or equal than"), "test");
run(test(10 <= 5, false, "Smaller or equal than negated"), "test");

run(test(10 >= 5, true, "Greater or equal than"), "test");
run(test(2 >= 5, false, "Greater or equal than negated"), "test");

run(test(20 == 20, true, "Equal than"), "test");
run(test(20 == 10, false, "Equal than negated"), "test");

run(test(20 ! 10, true, "Not Equal than"), "test");
run(test(20 ! 20, false, "Not Equal than negated"), "test");

run(test([1, 2, 3] == [1, 2, 3], true, "Arrays equal"), "test");
run(test([[1], 2, 3] == [[1], 2, 3], true, "Nested arrays equal"), "test");
run(test([1, 2, 3, 4] == [1, 2, 3], false, "Unmatching arrays"), "test");



# Check binary operators
run(test(2 + 5, 7, "Addition"), "test");
run(test(10 - 5, 5, "Subtraction"), "test");
run(test(10 * 5, 50, "Multiplication"), "test");
run(test(100 / 4, 25, "Division"), "test");
run(test(10 % 3, 1, "Modulus"), "test");
run(test(2 ** 5, 32, "Exponential"), "test");

# Check nested binary operators
run(test((5 + 5) + 20, 30, "Nested 1"), "test");
run(test((70 - 50) + 10, 30, "Nested 2"), "test");
run(test((5 * 5) + 5, 30, "Nested 3"), "test");



# Check binary operators between different types
run(test("lol" * 3, "lollollol", "Multiplaying strings"), "test");
run(test("test" + "test", "testtest", "Concat strings"), "test");
run(test("test" + 3, "test3", "Concat strings and numeric integers"), "test");
run(test("test" + 3.5, "test3.5", "Concat strings and numeric floats"), "test");
run(test(3 + "test", "3test", "Concat numeric floats and strings"), "test");
run(test(3.5 + "test", "3.5test", "Concat numeric integers and strings"), "test");



# Test while loop
let i = 0;
while (i < 50) {
    i = i + 1;
};
run(test(i, 50, "While loop"), "test");

# Test the repeat function
let repeatCount = 0;
repeat(100, func callback(index) {
    repeatCount = repeatCount + 1;
});
run(test(repeatCount, 100, "Repeat function"), "test");

# Test the range function
let last_index = -1;
range(100, 150, func callback(i) {
    last_index = i;
});
run(test(last_index, 149, "Range function"), "test");



# Test different scoping scenarios and rules
let value = 0;
func test_functionscope(callback) {
    let value = 0;
    callback();
    run(test(value, 0, "Function scope"), "test");
};
test_functionscope(func callback() {
    value = value + 5;
});
run(test(value, 5, "Global scope"), "test");



# Test the array each function
let total = 0;
each([1, 2, 3], func cb(e) {
    total = total + e;
});
run(test(total, 6, "Array each function"), "test");



# Check if array_of_size returns a correctly sized array
let array = array_of_size(5);
run(test(length(array), 5, "array_of_size returns correctly"), "test");



# Append function works correctly
let initial = [1, 2];
initial = append(initial, 3);
run(test(initial(2), 3, "append function"), "test");



# Check if the map function works correctly
let initial = [1, 2, 3, 4];
let total = 0;
map(initial, func cb(e) {
    total = total + e;
});
run(test(total, 10, "map function"), "test");



# Check the filter function
let initial = [1, 2, 3, 4, 5];
initial = filter(initial, func(value) {
    value < 3;
});
run(test(initial, [1, 2], "filter function"), "test");



# Check the first and last functions
run(test(first([1, 2]), 1, "first function"), "test");
run(test(last([1, 2]), 2, "last function"), "test");



# Check compact function
run(test(compact([1, null, 2, null, null]), [1, 2], "compact function"), "test");



# Check the concat function
run(test(concat([1, 2], [3, 4]), [1, 2, 3, 4], "concat function"), "test");



# Check is_null function
run(test(is_null(null), true, "is_null function"), "test");



# Check reverse function
run(test(reverse([1, 2, 3]), [3, 2, 1], "reverse function 1"), "test");
run(test(reverse([1]), [1], "reverse function 2"), "test");
run(test(reverse([1, "test", 2]), [2, "test", 1], "reverse function 3"), "test");



# Check empty function
run(test(empty([1]), false, "empty function 1"), "test");
run(test(empty([1, 2]), false, "empty function 2"), "test");
run(test(empty([]), true, "empty function 3"), "test");



# Test if optional function identifiers work
let received = 0;
func increment(value, callback) {
    callback(value + 1);
};
increment(9, func(value) {
    received = value;
});
run(test(received, 10, "Optional function names"), "test");



# typeof function
run(test(typeof("test"), "String", "Typeof 1"), "test");
run(test(typeof(25), "Numeric", "Typeof 2"), "test");
run(test(typeof(2.5), "Numeric", "Typeof 3"), "test");
run(test(typeof(-2.7), "Numeric", "Typeof 4"), "test");
run(test(typeof([1, 2, 3]), "Array", "Typeof 5"), "test");
run(test(typeof(true), "Bool", "Typeof 6"), "test");
run(test(typeof(false), "Bool", "Typeof 7"), "test");
run(test(typeof(null), "Null", "Typeof 8"), "test");



# Random function
run(test(typeof(rand()), "Numeric", "Random 1"), "test");
run(test(typeof(rand()), "Numeric", "Random 2"), "test");
run(test(typeof(rand()), "Numeric", "Random 3"), "test");



# Script exit code
if (run(0, "result") == 0) {
    print("Test suite passed!");
} else {
    print("Test suite failed!");
};
run(0, "result");
