class CharReader {
  const buffer = []
  let pos = 0
  let source
  let hidden = false

  func constructor(source) {
    self.source = source
  }

  func set_pos(pos) {
    self.pos = pos.max(0).min((buffer.length()).max(0))
  }

  func reset() {
    self.buffer.clear()
    set_pos(0)
  }

  func render(offset) {
    if (!hidden) {
      write("\r")
      write(buffer.join(""))
      write(" " * offset)
      write("\r")
      write(buffer.filter(func(e, i) { i < pos }).join(""))
    }
  }

  func read() {

    let enter_passed = false
    let input
    while (!enter_passed) {
      input = self.source.getc()

      if (input == "\r") {
        enter_passed = true
        write("\n")
      } else if (input.ord()[0] == 3) {
        exit(130)
      } else if (input.ord()[0] == 127) {
        if ((pos - 1) >= 0) {
          buffer.delete(pos - 1)
          pos -= 1
        }

        render(1)
      } else if (input.ord()[0] == 27) {

        #Â Read two more chars
        self.source.getc()

        input = self.source.getc()
        if (input == "A") {
          self.onup()
        } else if (input == "D") {
          set_pos(pos - 1)
        } else if (input == "B") {
          self.ondown()
        } else if (input == "C") {
          set_pos(pos + 1)
        }

        render(0)
      } else {
        buffer.insert(pos, input)
        pos += 1

        render(0)
      }
    }

    let data = self.buffer.join("")
    reset()
    render(data.length())
    data
  }
}
export = CharReader

const myReader = CharReader(stdin)
myReader.history = []

let input
while (true) {
  input = myReader.read()
}
